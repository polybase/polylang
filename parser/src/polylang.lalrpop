use crate::ast::*;
use crate::lexer;
use std::str::FromStr;
use lalrpop_util::ParseError;

grammar<'input>(input: &'input str);

extern {
    type Location = usize;
    type Error = lexer::LexicalError;

    enum lexer::Tok<'input> {
        identifier => lexer::Tok::Identifier(<&'input str>),
        number => lexer::Tok::NumberLiteral(<f64>),
        string => lexer::Tok::StringLiteral(<&'input str>),
        hex_literal => lexer::Tok::HexLiteral(<&'input str>),
        "desc" => lexer::Tok::Desc,
        "asc" => lexer::Tok::Asc,
        "true" => lexer::Tok::True,
        "false" => lexer::Tok::False,
        "string" => lexer::Tok::String,
        "number" => lexer::Tok::Number,
        "f32" => lexer::Tok::F32,
        "f64" => lexer::Tok::F64,
        "u32" => lexer::Tok::U32,
        "u64" => lexer::Tok::U64,
        "i32" => lexer::Tok::I32,
        "i64" => lexer::Tok::I64,
        "boolean" => lexer::Tok::Boolean,
        "map" => lexer::Tok::Map,
        "record" => lexer::Tok::Record,
        "PublicKey" => lexer::Tok::PublicKey,
        "bytes" => lexer::Tok::Bytes,
        "let" => lexer::Tok::Let,
        "break" => lexer::Tok::Break,
        "return" => lexer::Tok::Return,
        "throw" => lexer::Tok::Throw,
        "if" => lexer::Tok::If,
        "else" => lexer::Tok::Else,
        "while" => lexer::Tok::While,
        "for" => lexer::Tok::For,
        "in" => lexer::Tok::In,
        "of" => lexer::Tok::Of,
        "function" => lexer::Tok::Function,
        "@index" => lexer::Tok::Index,
        "collection" => lexer::Tok::Collection,
        "eth#" => lexer::Tok::EthLiteralStart,
        "falcon#" => lexer::Tok::FalconLiteralStart,
        "{" => lexer::Tok::LBrace,
        "}" => lexer::Tok::RBrace,
        "[" => lexer::Tok::LBracket,
        "]" => lexer::Tok::RBracket,
        "(" => lexer::Tok::LParen,
        ")" => lexer::Tok::RParen,
        "<" => lexer::Tok::ArrowLeft,
        ">" => lexer::Tok::ArrowRight,
        ":" => lexer::Tok::Colon,
        ";" => lexer::Tok::Semicolon,
        "," => lexer::Tok::Comma,
        "." => lexer::Tok::Dot,
        "!" => lexer::Tok::Bang,
        "?" => lexer::Tok::Question,
        "~" => lexer::Tok::Tilde,
        "*" => lexer::Tok::Star,
        "/" => lexer::Tok::Slash,
        "%" => lexer::Tok::Percent,
        "+" => lexer::Tok::Plus,
        "-" => lexer::Tok::Minus,
        "&" => lexer::Tok::Ampersand,
        "**" => lexer::Tok::StarStar,
        "&&" => lexer::Tok::AmpersandAmpersand,
        "@" => lexer::Tok::At,
        "^" => lexer::Tok::Caret,
        "|" => lexer::Tok::Pipe,
        "||" => lexer::Tok::PipePipe,
        "<=" => lexer::Tok::Lte,
        ">=" => lexer::Tok::Gte,
        "=" => lexer::Tok::Equal,
        "==" => lexer::Tok::EqualEqual,
        "!=" => lexer::Tok::BangEqual,
        "-=" => lexer::Tok::MinusEqual,
        "+=" => lexer::Tok::PlusEqual,
    }
}

Ident: String = {
    <i:identifier> => i.to_string(),
    "desc" => "desc".to_string(),
    "asc" => "asc".to_string(),
};

BasicType: Type = {
    "string" => Type::String,
    "number" => Type::Number,
    "f32" => Type::F32,
    "f64" => Type::F64,
    "u32" => Type::U32,
    "u64" => Type::U64,
    "i32" => Type::I32,
    "i64" => Type::I64,
    "boolean" => Type::Boolean,
    "bytes" => Type::Bytes,
    "PublicKey" => Type::PublicKey,
};

ArrayInnerType: Type = {
    <t:BasicType> => t,
    <i:Ident> => Type::ForeignRecord {
        collection: i,
    },
}

Type: Type = {
    BasicType,
    <t:ArrayInnerType> "[" "]" => Type::Array(Box::new(t)),
    "map" "<" <kt:BasicType> "," <vt:Type> ">" => Type::Map(Box::new(kt), Box::new(vt)),
    "{" <fields:(Field ";")*> "}" => Type::Object(fields.into_iter().map(|(f, _)| f).collect()),
    <i:Ident> => Type::ForeignRecord {
        collection: i,
    },
};

ParameterType: ParameterType = {
    <l:@L> <t:Type> =>? match t {
        Type::String => Ok(ParameterType::String),
        Type::Number => Ok(ParameterType::Number),
        Type::F32 => Ok(ParameterType::F32),
        Type::F64 => Ok(ParameterType::F64),
        Type::U32 => Ok(ParameterType::U32),
        Type::U64 => Ok(ParameterType::U64),
        Type::I32 => Ok(ParameterType::I32),
        Type::I64 => Ok(ParameterType::I64),
        Type::Boolean => Ok(ParameterType::Boolean),
        Type::Bytes => Ok(ParameterType::Bytes),
        Type::Array(t) => Ok(ParameterType::Array(*t)),
        Type::Map(kt, vt) => Ok(ParameterType::Map(*kt, *vt)),
        Type::Object(fields) => Err(ParseError::User {
            error: lexer::LexicalError::UserError {
                start: l,
                end: l,
                message: "object type not allowed for parameter".to_string(),
            }
        }),
        Type::PublicKey => Ok(ParameterType::PublicKey),
        Type::ForeignRecord { collection } => Ok(ParameterType::ForeignRecord { collection }),
    },
    "record" => ParameterType::Record,
};

Number: f64 = {
    <n:number> => n,
};

HexLiteral: Vec<u8> = {
    <l:@L> <h:hex_literal> <r:@R> =>? hex::decode(&h[2..]).map_err(|e| ParseError::User {
        error: lexer::LexicalError::UserError {
            start: l,
            end: r,
            message: format!("Invalid hex literal: {}", e),
        }
    }),
};

Literal: Literal = {
    "eth#" <h:HexLiteral> => Literal::Eth(h),
};

String: String = {
    <s:string> => s[1..s.len()-1].to_string(),
};

Boolean: bool = {
    "true" => true,
    "false" => false,
};

Primitive: Primitive = {
    <l:@L> <n:Number> <r:@R> => Primitive::Number(n, input[l..r].contains('.')),
    <s:String> => Primitive::String(s),
};

ObjectFieldValues: Vec<(String, Expression)> = {
    <id:Ident> ":" <e:Expression> => vec![(id, e)],
    <id:Ident> ":" <e:Expression> "," <fs:ObjectFieldValues> => {
        let mut fs = fs;
        fs.insert(0, (id, e));
        fs
    },
    => vec![],
};

Array: Vec<Expression> = {
    "[" "]" => vec![],
    "[" <e:Expression> "]" => vec![e],
    "[" <e:Expression> "," <values:ArrayValues> "]" => {
        let mut values = values;
        values.insert(0, e);
        values
    },
}

ArrayValues: Vec<Expression> = {
    <e: Expression> => vec![e],
    <e: Expression> "," <es:ArrayValues> => {
        let mut es = es;
        es.insert(0, e);
        es
    },
};

pub Expression: Expression = {
    #[precedence(level="0")]
    <lo:@L> <p:Primitive> <hi:@R> => ExpressionKind::Primitive(p).with_span(lo, hi).into(),
    #[precedence(level="0")]
    <lo:@L> <b:Boolean> <hi:@R> => ExpressionKind::Boolean(b).with_span(lo, hi).into(),
    #[precedence(level="0")]
    <lo:@L> <id:Ident> <hi:@R> => ExpressionKind::Ident(id).with_span(lo, hi).into(),
    #[precedence(level="0")]
    <lo:@L> "{" <fields:ObjectFieldValues> "}" <hi:@R> => ExpressionKind::Object(Object { fields }).with_span(lo, hi).into(),
    #[precedence(level="1")]
    <lo:@L> <l:Expression> "[" <r:Expression> "]" <hi:@R> => ExpressionKind::Index(Box::new(l), Box::new(r)).with_span(lo, hi).into(),
    #[precedence(level="1")]
    <lo:@L> <l:Expression> "." <id:Ident> <hi:@R> => ExpressionKind::Dot(Box::new(l), id).with_span(lo, hi).into(),
    #[precedence(level="1")]
    <lo:@L> <l:Expression> "(" <args:ArgumentList> ")" <hi:@R> => ExpressionKind::Call(Box::new(l), args).with_span(lo, hi).into(),
    #[precedence(level="1")]
    "(" <e:Expression> ")" => e,
    #[precedence(level="2")]
    <lo:@L> <array:Array> <hi:@R> => ExpressionKind::Array(array).with_span(lo, hi).into(),
    #[precedence(level="2")]
    <lo:@L> "!" <l:Expression> <hi:@R> => ExpressionKind::Not(Box::new(l)).with_span(lo, hi).into(),
    #[precedence(level="2")]
    <lo:@L> "~" <l:Expression> <hi:@R> => ExpressionKind::BitNot(Box::new(l)).with_span(lo, hi).into(),
    #[precedence(level="3")] #[assoc(side="left")]
    <lo:@L> <l:Expression> "**" <r:Expression> <hi:@R> => ExpressionKind::Exponent(Box::new(l), Box::new(r)).with_span(lo, hi).into(),
    #[precedence(level="4")] #[assoc(side="left")]
    <lo:@L> <l:Expression> "*" <r:Expression> <hi:@R> => ExpressionKind::Multiply(Box::new(l), Box::new(r)).with_span(lo, hi).into(),
    #[precedence(level="4")] #[assoc(side="left")]
    <lo:@L> <l:Expression> "/" <r:Expression> <hi:@R> => ExpressionKind::Divide(Box::new(l), Box::new(r)).with_span(lo, hi).into(),
    #[precedence(level="4")] #[assoc(side="left")]
    <lo:@L> <l:Expression> "%" <r:Expression> <hi:@R> => ExpressionKind::Modulo(Box::new(l), Box::new(r)).with_span(lo, hi).into(),
    #[precedence(level="5")] #[assoc(side="left")]
    <lo:@L> <l:Expression> "+" <r:Expression> <hi:@R> => ExpressionKind::Add(Box::new(l), Box::new(r)).with_span(lo, hi).into(),
    #[precedence(level="5")] #[assoc(side="left")]
    // TODO: Make this a separate ExpressionKind
    <lo:@L> <l:Expression> "+" "+" <hi:@R> => ExpressionKind::AssignAdd(Box::new(l), Box::new(ExpressionKind::Primitive(Primitive::Number(1., false)).with_span(lo, hi))).with_span(lo, hi).into(),
    #[precedence(level="5")] #[assoc(side="left")]
    <lo:@L> <l:Expression> "-" <r:Expression> <hi:@R> => ExpressionKind::Subtract(Box::new(l), Box::new(r)).with_span(lo, hi).into(),
    #[precedence(level="6")] #[assoc(side="left")]
    <lo:@L> <l:Expression> "<" <second:("<")?> <r:Expression> <hi:@R> => match second {
        None => ExpressionKind::LessThan(Box::new(l), Box::new(r)).with_span(lo, hi).into(),
        Some(_) => ExpressionKind::ShiftLeft(Box::new(l), Box::new(r)).with_span(lo, hi).into(),
    },
    #[precedence(level="6")] #[assoc(side="left")]
    <lo:@L> <l:Expression> ">" <second:(">")?> <r:Expression> <hi:@R> => match second {
        None => ExpressionKind::GreaterThan(Box::new(l), Box::new(r)).with_span(lo, hi).into(),
        Some(_) => ExpressionKind::ShiftRight(Box::new(l), Box::new(r)).with_span(lo, hi).into(),
    },
    #[precedence(level="7")] #[assoc(side="left")]
    <lo:@L> <l:Expression> "&" <r:Expression> <hi:@R> => ExpressionKind::BitAnd(Box::new(l), Box::new(r)).with_span(lo, hi).into(),
    #[precedence(level="8")] #[assoc(side="left")]
    <lo:@L> <l:Expression> "^" <r:Expression> <hi:@R> => ExpressionKind::BitXor(Box::new(l), Box::new(r)).with_span(lo, hi).into(),
    #[precedence(level="9")] #[assoc(side="left")]
    <lo:@L> <l:Expression> "|" <r:Expression> <hi:@R> => ExpressionKind::BitOr(Box::new(l), Box::new(r)).with_span(lo, hi).into(),
    #[precedence(level="10")] #[assoc(side="none")]
    <lo:@L> <l:Expression> "<=" <r:Expression> <hi:@R> => ExpressionKind::LessThanOrEqual(Box::new(l), Box::new(r)).with_span(lo, hi).into(),
    #[precedence(level="10")] #[assoc(side="none")]
    <lo:@L> <l:Expression> ">=" <r:Expression> <hi:@R> => ExpressionKind::GreaterThanOrEqual(Box::new(l), Box::new(r)).with_span(lo, hi).into(),
    #[precedence(level="11")] #[assoc(side="none")]
    <lo:@L> <l:Expression> "==" <r:Expression> <hi:@R> => ExpressionKind::Equal(Box::new(l), Box::new(r)).with_span(lo, hi).into(),
    #[precedence(level="11")] #[assoc(side="none")]
    <lo:@L> <l:Expression> "!=" <r:Expression> <hi:@R> => ExpressionKind::NotEqual(Box::new(l), Box::new(r)).with_span(lo, hi).into(),
    #[precedence(level="12")] #[assoc(side="left")]
    <lo:@L> <l:Expression> "&&" <r:Expression> <hi:@R> => ExpressionKind::And(Box::new(l), Box::new(r)).with_span(lo, hi).into(),
    #[precedence(level="13")] #[assoc(side="left")]
    <lo:@L> <l:Expression> "||" <r:Expression> <hi:@R> => ExpressionKind::Or(Box::new(l), Box::new(r)).with_span(lo, hi).into(),
    #[precedence(level="14")] #[assoc(side="left")]
    <lo:@L> <l:Expression> "-=" <r:Expression> <hi:@R> => ExpressionKind::AssignSub(Box::new(l), Box::new(r)).with_span(lo, hi).into(),
    #[precedence(level="14")] #[assoc(side="left")]
    <lo:@L> <l:Expression> "+=" <r:Expression> <hi:@R> => ExpressionKind::AssignAdd(Box::new(l), Box::new(r)).with_span(lo, hi).into(),
    #[precedence(level="14")] #[assoc(side="none")]
    <lo:@L> <l:Expression> "=" <r:Expression> <hi:@R> => ExpressionKind::Assign(Box::new(l), Box::new(r)).with_span(lo, hi).into(),
};

ArgumentList: Vec<Expression> = {
    <e:Expression> <rest:("," Expression)*> => {
        let mut args = vec![e];
        for (_, e) in rest {
            args.push(e);
        }
        args
    },
    => vec![],
};

PrimitiveArgumentList: Vec<Primitive> = {
    <p:Primitive> <rest:("," Primitive)*> => {
        let mut args = vec![p];
        for (_, p) in rest {
            args.push(p);
        }
        args
    },
    => vec![],
};

CompoundStatement: Statement = {
    <lo:@L> <i:If> <hi:@R> => StatementKind::If(i).with_span(lo, hi),
    <lo:@L> <w:While> <hi:@R> => StatementKind::While(w).with_span(lo, hi),
    <lo:@L> <f:For> <hi:@R> => StatementKind::For(f).with_span(lo, hi),
};

Let: Let = {
    "let" <i:Ident> "=" <e:Expression> => Let { identifier: i, expression: e },
};

SmallStatement: StatementKind = {
    "break" => StatementKind::Break,
    "return" <e:Expression> => StatementKind::Return(e),
    "throw" <e:Expression> => StatementKind::Throw(e),
    <l:Let> => StatementKind::Let(l),
    <e:Expression> => StatementKind::Expression(e),
};

SimpleStatement: Statement = {
    <lo:@L> <s:SmallStatement> ";" <hi:@R> => s.with_span(lo, hi),
};

Statement: Statement = {
    SimpleStatement,
    CompoundStatement,
};

StatementsOrSimpleStatement: Vec<Statement> = {
    "{" <s:Statement+> "}" => s,
    <s:SimpleStatement> => vec![s],
};

If: If = {
    "if" "(" <condition:Expression> ")" <then_statements:StatementsOrSimpleStatement> <s2:("else" StatementsOrSimpleStatement)?> => If {
        condition,
        then_statements,
        else_statements: s2.map(|s| s.1).unwrap_or(vec![]),
    },
};

While: While = {
    "while" "(" <e:Expression> ")" "{" <s:Statement*> "}" => While {
        condition: e,
        statements: s,
    },
};

For: For = {
    "for" "(" <for_kind: ForKind> ")" "{" <statements:Statement*> "}" => For {
        for_kind,
        statements,
    }
}

ForKind: ForKind = {
    <init:Let> ";" <cond:Expression> ";" <post:Expression> => ForKind::Basic {
        initial_statement: ForInitialStatement::Let(init),
        condition: cond,
        post_statement: post,
    },
    <init:Expression> ";" <cond:Expression> ";" <post:Expression> => ForKind::Basic {
        initial_statement: ForInitialStatement::Expression(init),
        condition: cond,
        post_statement: post,
    },
    "let" <identifier:Ident> "in" <iterable:Expression> => ForKind::ForEach {
        for_each_type: ForEachType::In,
        identifier,
        iterable,
    },
    "let" <identifier:Ident> "of" <iterable:Expression> => ForKind::ForEach {
        for_each_type: ForEachType::Of,
        identifier,
        iterable,
    },
};

ParameterList: Vec<Parameter> = {
    <p:Parameter> <rest:("," Parameter)*> => {
        let mut params = vec![p];
        for (_, p) in rest {
            params.push(p);
        }
        params
    },
    => vec![],
};

Parameter: Parameter = {
    <name:Ident> ":" <type_:ParameterType> => Parameter {
        name,
        type_,
        required: true,
    },
    <name:Ident> "?" ":" <type_:ParameterType> => Parameter {
        name,
        type_,
        required: false,
    },
};

RootFunction: Function = {
    "function" <i: Ident> "(" <pl:ParameterList> ")" <return_type:(":" Type)?> "{" <l:@L> <s:Statement*> <r:@R> "}" => Function {
        name: i,
        decorators: vec![],
        parameters: pl,
        return_type: return_type.map(|(_, t)| t),
        statements: s,
        statements_code: input[l..r].to_string(),
    }
};

pub Function: Function = {
    <decs:Decorator*> "function" <i: Ident> "(" <pl:ParameterList> ")" <return_type:(":" Type)?> "{" <l:@L> <s:Statement*> <r:@R> "}" => Function {
        name: i,
        decorators: decs,
        parameters: pl,
        return_type: return_type.map(|(_, t)| t),
        statements: s,
        statements_code: input[l..r].to_string(),
    },
    <decs:Decorator*> <i: Ident> "(" <pl:ParameterList> ")" <return_type:(":" Type)?> "{" <l:@L> <s:Statement*> <r:@R> "}" => Function {
        name: i,
        decorators: decs,
        parameters: pl,
        return_type: return_type.map(|(_, t)| t),
        statements: s,
        statements_code: input[l..r].to_string(),
    },
};

Field: Field = {
    <decs:Decorator*> <name:Ident> "?" ":" <type_:Type> => Field{
        name,
        type_,
        required: false,
        decorators: decs,
    },
    <decs:Decorator*> <name:Ident> ":" <type_:Type> => Field{
        name,
        type_,
        required: true,
        decorators: decs,
    },
};

IndexField: IndexField = {
    "[" <path:FieldPath> "," <order:Order> "]" => IndexField{
        path,
        order,
    },
    <path:FieldPath> => IndexField{
        path,
        order: Order::Asc,
    },
};

FieldPath: Vec<String> = {
    <name:Ident> <rest:("." Ident)*> => {
        let mut path = vec![name];
        for (_, name) in rest {
            path.push(name);
        }
        path
    },
};

Order: Order = {
    "asc" => Order::Asc,
    "desc" => Order::Desc,
};

Index: Index = {
    "@index" "(" <fields:IndexFields> ")"  => Index{
        fields: fields,
    },
};

DecoratorName: String = {
    <l:@L> <name:Ident> =>? match name.as_str() {
        "public" => Ok(name),
        "read" => Ok(name),
        "call" => Ok(name),
        "delegate" => Ok(name),
        _ => Err(ParseError::User {
            error: lexer::LexicalError::UserError {
                start: l,
                end: l,
                message: format!("Unknown decorator: {}", name),
            },
        }),
    }
}

Decorator: Decorator = {
    <l:@L> "@" <name:DecoratorName> "(" <arguments:DecoratorArgument*> ")" <r:@R> => DecoratorNode{
        name,
        arguments,
    }.with_span(l, r),
    <l:@L> "@" <name:DecoratorName> <r:@R> => DecoratorNode{
        name,
        arguments: vec![],
    }.with_span(l, r),
};

DecoratorArgument: DecoratorArgument = {
    <id:Ident> => DecoratorArgument::Identifier(id),
    <literal:Literal> => DecoratorArgument::Literal(literal),
};

IndexFields: Vec<IndexField> = {
    <f:IndexField> <rest:("," IndexField)*> => {
        let mut fields = vec![f];
        for (_, f) in rest {
            fields.push(f);
        }
        fields
    },
    => vec![],
};

CollectionItem: CollectionItem = {
    <f:Field> ";" => CollectionItem::Field(f),
    <i:Index> ";" => CollectionItem::Index(i),
    <f:Function> => CollectionItem::Function(f),
};

Collection: Collection = {
    <decorators:Decorator*> "collection" <name:Ident> "{" <items:CollectionItem*> "}" => Collection {
        name: name,
        decorators: decorators,
        items: items,
    },
};

RootNode: RootNode = {
    <c:Collection> => RootNode::Collection(c),
    <f:RootFunction> => RootNode::Function(f),
};

pub Program: Program = {
    <r:RootNode*> => Program{
        nodes: r,
    },
};
