use crate::ast::*;
use std::str::FromStr;
use lalrpop_util::ParseError;

grammar;

Ident: String = {
    <s:r"[a-zA-Z_\$][a-zA-Z0-9_]*"> => s.to_string(),
    "desc" => "desc".to_string(),
    "asc" => "asc".to_string(),
};

Type: Type = {
    "string" => Type::String,
    "number" => Type::Number,
};

ParameterType: ParameterType = {
    "string" => ParameterType::String,
    "number" => ParameterType::Number,
    "record" => ParameterType::Record,
};

pub Number: f64 = {
    <s:r"-?[0-9]+(\.[0-9]+)?"> =>? f64::from_str(s).map_err(|_| ParseError::User {
        error: "invalid number",
    }),
};

pub String: String = {
    <s:r#"'[^']*'"#> => s[1..s.len()-1].to_string(),
};

Boolean: bool = {
    "true" => true,
    "false" => false,
};

Regex: String = {
    <s:r#"/[^/]*/"#> => s[1..s.len()-1].to_string(),
};

Primitive: Primitive = {
    <n:Number> => Primitive::Number(n),
    <s:String> => Primitive::String(s),
    <r:Regex> => Primitive::Regex(r),
};

pub Expression: Expression = {
    #[precedence(level="0")]
    <p:Primitive> => Expression::Primitive(p),
    #[precedence(level="0")]
    <b:Boolean> => Expression::Boolean(b),
    #[precedence(level="0")]
    <id:Ident> => Expression::Ident(id),
    #[precedence(level="1")]
    <l:Expression> "[" <r:Expression> "]" => Expression::Index(Box::new(l), Box::new(r)),
    #[precedence(level="1")]
    <l:Expression> "." <id:Ident> => Expression::Dot(Box::new(l), id),
    #[precedence(level="1")]
    <l:Expression> "(" <args:ArgumentList> ")" => Expression::Call(Box::new(l), args),
    #[precedence(level="1")]
    "(" <e:Expression> ")" => e,
    #[precedence(level="2")]
    <l:Expression> "!" => Expression::Not(Box::new(l)),
    #[precedence(level="2")]
    <l:Expression> "~" => Expression::BitNot(Box::new(l)),
    #[precedence(level="3")] #[assoc(side="left")]
    <l:Expression> "**" <r:Expression> => Expression::Exponent(Box::new(l), Box::new(r)),
    #[precedence(level="4")] #[assoc(side="left")]
    <l:Expression> "*" <r:Expression> => Expression::Multiply(Box::new(l), Box::new(r)),
    #[precedence(level="4")] #[assoc(side="left")]
    <l:Expression> "/" <r:Expression> => Expression::Divide(Box::new(l), Box::new(r)),
    #[precedence(level="4")] #[assoc(side="left")]
    <l:Expression> "%" <r:Expression> => Expression::Modulo(Box::new(l), Box::new(r)),
    #[precedence(level="5")] #[assoc(side="left")]
    <l:Expression> "+" <r:Expression> => Expression::Add(Box::new(l), Box::new(r)),
    #[precedence(level="5")] #[assoc(side="left")]
    <l:Expression> "-" <r:Expression> => Expression::Subtract(Box::new(l), Box::new(r)),
    #[precedence(level="6")] #[assoc(side="left")]
    <l:Expression> "<<" <r:Expression> => Expression::ShiftLeft(Box::new(l), Box::new(r)),
    #[precedence(level="6")] #[assoc(side="left")]
    <l:Expression> ">>" <r:Expression> => Expression::ShiftRight(Box::new(l), Box::new(r)),
    #[precedence(level="7")] #[assoc(side="left")]
    <l:Expression> "&" <r:Expression> => Expression::BitAnd(Box::new(l), Box::new(r)),
    #[precedence(level="8")] #[assoc(side="left")]
    <l:Expression> "^" <r:Expression> => Expression::BitXor(Box::new(l), Box::new(r)),
    #[precedence(level="9")] #[assoc(side="left")]
    <l:Expression> "|" <r:Expression> => Expression::BitOr(Box::new(l), Box::new(r)),
    #[precedence(level="10")] #[assoc(side="none")]
    <l:Expression> "<" <r:Expression> => Expression::LessThan(Box::new(l), Box::new(r)),
    #[precedence(level="10")] #[assoc(side="none")]
    <l:Expression> ">" <r:Expression> => Expression::GreaterThan(Box::new(l), Box::new(r)),
    #[precedence(level="10")] #[assoc(side="none")]
    <l:Expression> "<=" <r:Expression> => Expression::LessThanOrEqual(Box::new(l), Box::new(r)),
    #[precedence(level="10")] #[assoc(side="none")]
    <l:Expression> ">=" <r:Expression> => Expression::GreaterThanOrEqual(Box::new(l), Box::new(r)),
    #[precedence(level="11")] #[assoc(side="none")]
    <l:Expression> "==" <r:Expression> => Expression::Equal(Box::new(l), Box::new(r)),
    #[precedence(level="11")] #[assoc(side="none")]
    <l:Expression> "!=" <r:Expression> => Expression::NotEqual(Box::new(l), Box::new(r)),
    #[precedence(level="12")] #[assoc(side="left")]
    <l:Expression> "&&" <r:Expression> => Expression::And(Box::new(l), Box::new(r)),
    #[precedence(level="13")] #[assoc(side="left")]
    <l:Expression> "||" <r:Expression> => Expression::Or(Box::new(l), Box::new(r)),
    #[precedence(level="14")] #[assoc(side="left")]
    <l:Expression> "-=" <r:Expression> => Expression::AssignSub(Box::new(l), Box::new(r)),
    #[precedence(level="14")] #[assoc(side="left")]
    <l:Expression> "+=" <r:Expression> => Expression::AssignAdd(Box::new(l), Box::new(r)),
    #[precedence(level="14")] #[assoc(side="none")]
    <l:Expression> "=" <r:Expression> => Expression::Assign(Box::new(l), Box::new(r)),
};

ArgumentList: Vec<Expression> = {
    <e:Expression> <rest:("," Expression)*> => {
        let mut args = vec![e];
        for (_, e) in rest {
            args.push(e);
        }
        args
    },
    => vec![],
};

PrimitiveArgumentList: Vec<Primitive> = {
    <p:Primitive> <rest:("," Primitive)*> => {
        let mut args = vec![p];
        for (_, p) in rest {
            args.push(p);
        }
        args
    },
    => vec![],
};

CompoundStatement: Statement = {
    <i:If> => Statement::If(i),
    <w:While> => Statement::While(w),
}

SmallStatement: Statement = {
    "break" => Statement::Break,
    "return" <e:Expression> => Statement::Return(e),
    "throw" <e:Expression> => Statement::Throw(e),
    "let" <i:Ident> "=" <e:Expression> => Statement::Let(i, e),
    <e:Expression> => Statement::Expression(e),
};

SimpleStatement: Statement = {
    <s:SmallStatement> ";" => s,
};

Statement: Statement = {
    SimpleStatement,
    CompoundStatement,
};

StatementsOrSimpleStatement: Vec<Statement> = {
    "{" <s:Statement*> "}" => s,
    <s:SimpleStatement> => vec![s],
};

pub If: If = {
    "if" "(" <e:Expression> ")" <s:StatementsOrSimpleStatement> <s2:("else" StatementsOrSimpleStatement)?> => If {
        condition: e,
        then_statements: s,
        else_statements: s2.map(|s| s.1).unwrap_or(vec![]),
    },
};

While: While = {
    "while" "(" <e:Expression> ")" "{" <s:Statement*> "}" => While {
        condition: e,
        statements: s,
    },
};

ParameterList: Vec<Parameter> = {
    <p:Parameter> <rest:("," Parameter)*> => {
        let mut params = vec![p];
        for (_, p) in rest {
            params.push(p);
        }
        params
    },
    => vec![],
};

Parameter: Parameter = {
    <name:Ident> ":" <type_:ParameterType> => Parameter {
        name,
        type_,
        required: true,
    },
    <name:Ident> "?" ":" <type_:ParameterType> => Parameter {
        name,
        type_,
        required: false,
    },
};

RootFunction: Function = {
    "function" <i: Ident> "(" <pl:ParameterList> ")" <return_type:(":" Type)?> "{" <l:@L> <s:Statement*> <r:@R> "}" => Function {
        name: i,
        parameters: pl,
        return_type: return_type.map(|(_, t)| t),
        statements: s,
        statements_code: input[l..r].to_string(),
    }
};

pub Function: Function = {
    "function" <i: Ident> "(" <pl:ParameterList> ")" <return_type:(":" Type)?> "{" <l:@L> <s:Statement*> <r:@R> "}" => Function {
        name: i,
        parameters: pl,
        return_type: return_type.map(|(_, t)| t),
        statements: s,
        statements_code: input[l..r].to_string(),
    },
    <i: Ident> "(" <pl:ParameterList> ")" <return_type:(":" Type)?> "{" <l:@L> <s:Statement*> <r:@R> "}" => Function {
        name: i,
        parameters: pl,
        return_type: return_type.map(|(_, t)| t),
        statements: s,
        statements_code: input[l..r].to_string(),
    },
};

Field: Field = {
    <name:Ident> "?" ":" <type_:Type> => Field{
        name,
        type_,
        required: false,
    },
    <name:Ident> ":" <type_:Type> => Field{
        name,
        type_,
        required: true,
    },
};

IndexField: IndexField = {
    "[" <name:Ident> "," <order:Order> "]" => IndexField{
        name,
        order,
    },
    <name:Ident> => IndexField{
        name,
        order: Order::Asc,
    },
};

Order: Order = {
    "asc" => Order::Asc,
    "desc" => Order::Desc,
};

Index: Index = {
    "@index" "(" <fields:IndexFields> ")"  => Index{
        unique: false,
        fields: fields,
    },
    "@unique" "(" <fields:IndexFields> ")"  => Index{
        unique: true,
        fields: fields,
    },
};

IndexFields: Vec<IndexField> = {
    <f:IndexField> <rest:("," IndexField)*> => {
        let mut fields = vec![f];
        for (_, f) in rest {
            fields.push(f);
        }
        fields
    },
    => vec![],
};

CollectionItem: CollectionItem = {
    <f:Field> ";" => CollectionItem::Field(f),
    <i:Index> ";" => CollectionItem::Index(i),
    <f:Function> => CollectionItem::Function(f),
};

pub Collection: Collection = {
    "collection" <name:Ident> "{" <items:CollectionItem*> "}" => Collection {
        name: name,
        items: items,
    },
};

RootNode: RootNode = {
    <c:Collection> => RootNode::Collection(c),
    <f:RootFunction> => RootNode::Function(f),
};

pub Program: Program = {
    <r:RootNode*> => Program{
        nodes: r,
    },
};
